generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  email      String    @unique @db.VarChar(191)
  password   String    @db.VarChar(255)
  role       Role      @default(USER)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(191)
}

model Message {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  email      String   @db.VarChar(255)
  subject    String   @db.VarChar(255)
  message    String   @db.Text
  created_at DateTime @default(now())

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Home {
  id          Int    @id @default(autoincrement())
  aboutUs     Json
  advantages  Json
  services    Json?    
}

model Categories {
  id              Int       @id @default(autoincrement())
  category        String    @unique @db.VarChar(191)  
  title           String    @db.VarChar(255)
  mainDescription String    @db.Text
  overviewTitle   String    @db.VarChar(255)
  overviewContent String    @db.Text
  offeringsTitle  String    @db.VarChar(255)
  offeringsContent String   @db.Text
  services        Services[]
} 

model Technology {
  id          Int        @id @default(autoincrement())
  name        String     @unique @db.VarChar(191)
  title       String     @db.VarChar(255)
  description String     @db.Text
  benefits    String?    @db.Text
  services    Services[]
}

model Services {
  id              Int          @id @default(autoincrement())
  title           String       @unique @db.VarChar(191)
  description     String       @db.Text
  servicelink     String       @unique @db.VarChar(191)
  image           String?      @db.VarChar(255)
  features        Feature[]    
  category        Categories?  @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  status          Boolean      @default(false)
  technology      Technology?  @relation(fields: [technologyId], references: [id])
  technologyId    Int?         

  @@index([categoryId])
  @@index([technologyId])
}

model Feature {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  description String    @db.Text
  service     Services? @relation(fields: [serviceId], references: [id])
  serviceId   Int?

  @@index([serviceId])
}

model Partner {
  id                Int      @id @default(autoincrement())
  name             String
  email            String   @unique
  phone            String
  hearAboutUs      String
  companyName      String
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  postalCode       String
  country          String
  website          String?
  interestedProducts Json
  message          String?
  status           String   @default("PENDING")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Seller {
  id        Int      @id @default(autoincrement())
  name      String
  country   String
  email     String?
  address   String?
  company   String?
  phones    Phone[]  @relation("SellerPhones")
}

model Phone {
  id        Int    @id @default(autoincrement())
  number    String
  sellerId  Int
  seller    Seller @relation(fields: [sellerId], references: [id], onDelete: Cascade, name: "SellerPhones")
}
